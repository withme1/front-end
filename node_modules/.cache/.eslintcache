[{"/var/www/front-end/src/main/room/createRoom/CreateRoom.js":"1","/var/www/front-end/src/main/room/RoomList.js":"2","/var/www/front-end/src/main/room/createRoom/SelectLoc.js":"3","/var/www/front-end/src/main/room/sort/SortRoom.js":"4","/var/www/front-end/src/main/room/sort/SelectLoc.js":"5","/var/www/front-end/src/main/room/createRoom/CreateLocInput.js":"6","/var/www/front-end/src/header/LogoComponent.js":"7","/var/www/front-end/src/main/room/ModalText.js":"8","/var/www/front-end/src/main/room/createRoom/ValidCheck.js":"9","/var/www/front-end/src/main/room/createRoom/CreateTime.js":"10","/var/www/front-end/src/App.js":"11","/var/www/front-end/src/index.js":"12","/var/www/front-end/src/reportWebVitals.js":"13","/var/www/front-end/src/main/Main.js":"14","/var/www/front-end/src/header/Header.js":"15","/var/www/front-end/src/header/AdComponent.js":"16","/var/www/front-end/src/main/chat/ComputerChat.js":"17","/var/www/front-end/src/main/chat/MobileChat.js":"18","/var/www/front-end/src/main/chat/Chat.js":"19","/var/www/front-end/src/main/room/Room.js":"20","/var/www/front-end/src/main/util/getDistance.js":"21","/var/www/front-end/src/main/chat/ChatView.js":"22","/var/www/front-end/src/main/room/EnterButton.js":"23","/var/www/front-end/src/main/room/StartTime.js":"24","/var/www/front-end/src/main/room/Start2End.js":"25","/var/www/front-end/src/main/room/createRoom/CreateDate.js":"26","/var/www/front-end/src/main/chat/type/MyChat.js":"27","/var/www/front-end/src/main/chat/type/OtherChat.js":"28","/var/www/front-end/src/main/chat/type/SystemChat.js":"29","/var/www/front-end/src/socket/socket.js":"30","/var/www/front-end/src/main/room/MyRoom.js":"31","/var/www/front-end/src/main/chat/ChatRoomInfo.js":"32","/var/www/front-end/src/main/chat/ChatMapInfo.js":"33","/var/www/front-end/src/main/util/getMiddleLoc.js":"34","/var/www/front-end/src/main/util/getLevelByDistance.js":"35"},{"size":9133,"mtime":1653808800387,"results":"36","hashOfConfig":"37"},{"size":11104,"mtime":1653809757820,"results":"38","hashOfConfig":"37"},{"size":2924,"mtime":1652428607844,"results":"39","hashOfConfig":"37"},{"size":2196,"mtime":1652878537665,"results":"40","hashOfConfig":"37"},{"size":2667,"mtime":1652417116580,"results":"41","hashOfConfig":"37"},{"size":1263,"mtime":1653034402425,"results":"42","hashOfConfig":"37"},{"size":498,"mtime":1652427711550,"results":"43","hashOfConfig":"37"},{"size":3624,"mtime":1653029639407,"results":"44","hashOfConfig":"37"},{"size":599,"mtime":1653015678569,"results":"45","hashOfConfig":"37"},{"size":1350,"mtime":1652875712597,"results":"46","hashOfConfig":"37"},{"size":194,"mtime":1652496465913,"results":"47","hashOfConfig":"37"},{"size":666,"mtime":1653815645015,"results":"48","hashOfConfig":"37"},{"size":362,"mtime":1652372855323,"results":"49","hashOfConfig":"37"},{"size":3546,"mtime":1653815634031,"results":"50","hashOfConfig":"37"},{"size":585,"mtime":1652372855319,"results":"51","hashOfConfig":"37"},{"size":112,"mtime":1652928657913,"results":"52","hashOfConfig":"37"},{"size":798,"mtime":1652977490457,"results":"53","hashOfConfig":"37"},{"size":2381,"mtime":1652954455050,"results":"54","hashOfConfig":"37"},{"size":2928,"mtime":1653282485604,"results":"55","hashOfConfig":"37"},{"size":1294,"mtime":1652889242185,"results":"56","hashOfConfig":"37"},{"size":519,"mtime":1652883319650,"results":"57","hashOfConfig":"37"},{"size":1120,"mtime":1652970547608,"results":"58","hashOfConfig":"37"},{"size":1165,"mtime":1652889337564,"results":"59","hashOfConfig":"37"},{"size":386,"mtime":1652372855323,"results":"60","hashOfConfig":"37"},{"size":517,"mtime":1652887549240,"results":"61","hashOfConfig":"37"},{"size":1648,"mtime":1652875708893,"results":"62","hashOfConfig":"37"},{"size":1110,"mtime":1653901880354,"results":"63","hashOfConfig":"37"},{"size":975,"mtime":1653902937243,"results":"64","hashOfConfig":"37"},{"size":796,"mtime":1652970702390,"results":"65","hashOfConfig":"37"},{"size":130,"mtime":1652500644773,"results":"66","hashOfConfig":"37"},{"size":1477,"mtime":1652888128031,"results":"67","hashOfConfig":"37"},{"size":1734,"mtime":1652970316510,"results":"68","hashOfConfig":"37"},{"size":3548,"mtime":1652970171612,"results":"69","hashOfConfig":"37"},{"size":145,"mtime":1652883420348,"results":"70","hashOfConfig":"37"},{"size":196,"mtime":1652885748038,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"21kulg",{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/front-end/src/main/room/createRoom/CreateRoom.js",["189","190"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport { Box, } from '@mui/system';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { useEffect, useState } from 'react';\nimport Modal from 'react-modal/lib/components/Modal';\nimport 'dayjs/locale/ko';\nimport CreateLocInput from './CreateLocInput';\nimport CreateDate from './CreateDate';\nimport CreateTime from './CreateTime';\nimport { checkText, checkDate, checkTime } from './ValidCheck'\nimport { getSocket } from '../../../socket/socket'\n\n\nconst dayjs = require(\"dayjs\");\ndayjs.locale('ko');\n\nconst modalStyle = {\n    content: {\n        top: 'calc(var(--vh, 1vh) * 10)',\n        left: 'calc(50vw - 160px)',\n        right: 'calc(50vw - 160px)',\n        bottom: 'calc(var(--vh, 1vh) * 10)',\n        borderRadius: \"5px\",\n        border: \"1px solid #2BAE66\"\n    }\n}\n\nconst createRoomDivStyle = css`\n    height: 100%;\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nconst inputComponentStyle = css`\n    padding: 10px;\n    display: flex;\n    justify-content: center;\n    color: #FCF6F5;\n`;\n\nconst submitStyle = css`\n    color: #2BAE66;\n    border: 1px solid #2BAE66;\n\n    &:hover {\n        color: #2BAE66;\n        border: 1px solid #2BAE66;\n    }\n`;\n\nconst closeStyle = css`\n    color: #2BAE66;\n    border: 1px solid #2BAE66;\n\n    &:hover {\n        color: #2BAE66;\n        border: 1px solid #2BAE66;\n    }\n`;\n\nconst validColor = \"#2BAE66\";\n\nconst textFieldStyle = {\n    \".MuiInputLabel-root.Mui-focused\": {\n        color: validColor\n    },\n    \".MuiOutlinedInput-root.Mui-focused fieldset\": {\n        borderColor: validColor\n    }\n};\n\nfunction CreateRoom({ start, setStart, end, setEnd, startLoc, setStartLoc, endLoc, setEndLoc, setOpenCreateButton, setOpenSortButton, clearMessage, rejoin, setRejoin, setRoomList, remake, setRemake, open, setOpen, addRoom, isInRoom, setIsInRoom, isHost, setIsHost, roomId, setRoomId, deleteRoom, addMessage }) {\n    const [startActivate, setStartActivate] = useState(false);\n    const [endActivate, setEndActivate] = useState(false);\n    const [startDay, setStartDay] = useState(dayjs().hour() === 23 ? dayjs().add(1, 'day') : dayjs());\n    const [startTime, setStartTime] = useState(dayjs().add(1, 'hour'));\n\n    const requestCreateRoom = () => {\n        getSocket().emit('createRoomReq', {\n            SrcText: start,\n            DestText: end,\n            SrcLatitude: startLoc.latitude,\n            SrcLongitude: startLoc.longitude,\n            DestLatitude: endLoc.latitude,\n            DestLongitude: endLoc.longitude,\n            date: startDay.format('YYYY-MM-DD'),\n            time: startTime.format('HH:mm:ss')\n        });\n    }\n\n    useEffect(() => {\n        getSocket().removeAllListeners('createRoomRes');\n        getSocket().on('createRoomRes', (res) => {\n            if (res.ok) {\n                const room = res.room;\n                clearMessage();\n                setIsInRoom(true);\n                setIsHost(true);\n                setRoomId(parseInt(room.id));\n                addRoom({\n                    id: parseInt(room.id),\n                    start: room.SrcText,\n                    startLoc: { latitude: parseFloat(room.SrcLatitude), longitude: parseFloat(room.SrcLongitude) },\n                    end: room.DestText,\n                    endLoc: { latitude: parseFloat(room.DestLatitude), longitude: parseFloat(room.DestLongitude) },\n                    date: dayjs(room.date),\n                    time: dayjs('2020-01-01 ' + room.time)\n                });\n                addMessage({ type: 'system', text: '방 생성' });\n            } else {\n                alert('createRoomRes error: ' + res.reason);\n            }\n        });\n    }, [roomId])\n\n    useEffect(() => {\n        getSocket().removeAllListeners('deleteRoomRes');\n        getSocket().on('deleteRoomRes', (res) => {\n            if (res.ok) {\n                if (remake) {\n                    getSocket().emit('createRoomReq', {\n                        SrcText: start,\n                        DestText: end,\n                        SrcLatitude: startLoc.latitude,\n                        SrcLongitude: startLoc.longitude,\n                        DestLatitude: endLoc.latitude,\n                        DestLongitude: endLoc.longitude,\n                        date: startDay.format('YYYY-MM-DD'),\n                        time: startTime.format('HH:mm:ss')\n                    })\n                    setRemake(false);\n                } else if (rejoin !== null) {\n                    getSocket().emit('joinRoomReq', rejoin);\n                    setRejoin(null);\n                }\n                setRoomList((prev) => (prev.filter((room) => room.id !== res.id)));\n                addMessage({ type: 'system', text: '방 삭제' });\n                setIsInRoom(false);\n                setIsHost(false);\n                setRoomId(null);\n            } else {\n                alert(res.reason)\n            }\n        })\n\n        getSocket().removeAllListeners('quitRoomRes');\n        getSocket().on('quitRoomRes', (res) => {\n            addMessage({ type: 'system', text: '퇴장' });\n            setIsInRoom(false);\n            setIsHost(false);\n            setRoomId(null);\n            if (remake) {\n                getSocket().emit('createRoomReq', {\n                    SrcText: start,\n                    DestText: end,\n                    SrcLatitude: startLoc.latitude,\n                    SrcLongitude: startLoc.longitude,\n                    DestLatitude: endLoc.latitude,\n                    DestLongitude: endLoc.longitude,\n                    date: startDay.format('YYYY-MM-DD'),\n                    time: startTime.format('HH:mm:ss')\n                })\n                setRemake(false);\n            } else if (rejoin !== null) {\n                getSocket().emit('joinRoomReq', rejoin);\n                setRejoin(null);\n            }\n        })\n    }, [rejoin, remake, start, end, startLoc, endLoc, startDay, startTime])\n\n    const isValidInput = () => {\n        if (checkText(start) && startLoc !== null && startActivate && endActivate && checkText(end) && endLoc !== null && checkDate(startDay) && checkTime(startDay, startTime)) {\n            return true;\n        }\n        return false;\n    }\n\n    const closeModalHandler = () => {\n        setOpen(false);\n        setOpenCreateButton(true);\n        setOpenSortButton(true);\n    }\n\n    const closeHandler = (e) => {\n        closeModalHandler();\n    }\n\n    const submitHandler = (e) => {\n        if (!isValidInput()) {\n            return;\n        }\n        if (isInRoom) {\n            let message;\n            if (isHost)\n                message = \"방을 재생성하시겠습니까?\";\n            else\n                message = \"기존 방에서는 퇴장하시겠습니까?\";\n            if (window.confirm(message)) {\n                if (isHost) {\n                    getSocket().emit('deleteRoomReq');\n                } else {\n                    getSocket().emit('quitRoomReq');\n                }\n                setIsHost(false);\n                setIsInRoom(false);\n                setRoomId(null);\n                setRemake(true);\n                closeModalHandler();\n            }\n            return;\n        }\n        requestCreateRoom();\n        closeModalHandler();\n    }\n\n    return (\n        <Modal\n            style={modalStyle}\n            isOpen={open}\n            onRequestClose={closeModalHandler}\n            ariaHideApp={false}\n        >\n            <div css={createRoomDivStyle}>\n                <Box css={inputComponentStyle}>\n                    <CreateLocInput label={\"출발지\"} textStyle={textFieldStyle} text={start} setText={setStart} loc={startLoc} setLoc={setStartLoc} activate={startActivate} setActivate={setStartActivate} />\n                </Box>\n                <Box css={inputComponentStyle}>\n                    <CreateLocInput label={\"목적지\"} textStyle={textFieldStyle} text={end} setText={setEnd} loc={endLoc} setLoc={setEndLoc} activate={endActivate} setActivate={setEndActivate} />\n                </Box>\n                <br />\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                    <Box css={inputComponentStyle}>\n                        <CreateDate day={startDay} setDay={setStartDay} textStyle={textFieldStyle} />\n                    </Box>\n                    <br />\n                    <Box css={inputComponentStyle}>\n                        <CreateTime day={startDay} time={startTime} setTime={setStartTime} textStyle={textFieldStyle} />\n                    </Box>\n                </LocalizationProvider>\n                <br />\n                <Box css={inputComponentStyle}>\n                    <Button css={submitStyle} onClick={submitHandler} variant=\"outlined\">확인</Button>\n                    <div css={css`padding: 10px;`}></div>\n                    <Button css={closeStyle} onClick={closeHandler} variant=\"outlined\">닫기</Button>\n                </Box>\n            </div>\n        </Modal >\n    )\n}\n\nexport default CreateRoom","/var/www/front-end/src/main/room/RoomList.js",["191","192","193"],["194"],"/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fab, List, ListItem } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport SearchIcon from '@mui/icons-material/Search';\nimport Room from './Room';\nimport MyRoom from './MyRoom';\nimport CreateRoom from './createRoom/CreateRoom';\nimport { useEffect, useState } from 'react';\nimport birdImg from '../../img/bird.png'\nimport SortRoom from './sort/SortRoom';\nimport { getDistance } from '../util/getDistance';\nimport { getSocket } from '../../socket/socket';\nimport dayjs from 'dayjs';\nimport { useMediaQuery } from 'react-responsive';\n\nconst listItemStyle = css`\n    padding: 2px;\n`;\n\nconst createRoomButtonStyle = {\n    margin: 0,\n    top: 'auto',\n    right: 20,\n    bottom: 20,\n    left: 'auto',\n    position: 'fixed',\n    color: \"#2BAE66\",\n    backgroundColor: \"white\"\n};\n\nconst openSortButtonStyle = {\n    margin: 0,\n    top: 'auto',\n    right: 20,\n    bottom: 85,\n    left: 'auto',\n    position: 'fixed',\n    color: \"#2BAE66\",\n    backgroundColor: \"white\"\n};\n\nfunction RoomList({ clearMessage, fullIds, setFullIds, rejoin, setRejoin, remake, setRemake, roomList, setRoomList, isInRoom, setIsInRoom, isHost, setIsHost, roomId, setRoomId, addMessage }) {\n    const [openCreateRoom, setOpenCreateRoom] = useState(false);\n    const [openSort, setOpenSort] = useState(false);\n    const [sortBy, setSortBy] = useState('start');\n    const [sortLoc, setSortLoc] = useState(() => { return { latitude: 0, longitude: 0 } });\n    const [openCreateButton, setOpenCreateButton] = useState(true);\n    const [openSortButton, setOpenSortButton] = useState(true);\n\n    const [start, setStart] = useState(\"\");\n    const [startLoc, setStartLoc] = useState({ latitude: 0, longitude: 0 });\n    const [end, setEnd] = useState(\"\");\n    const [endLoc, setEndLoc] = useState({ latitude: 0, longitude: 0 });\n\n    const getSortedList = (roomList) => {\n        return [...roomList.filter(room => room.id === roomId), ...roomList.filter(room => room.id !== roomId).sort((a, b) => {\n            if (sortBy === 'start') {\n                return getDistance(a.startLoc.latitude, a.startLoc.longitude, sortLoc.latitude, sortLoc.longitude) - getDistance(b.startLoc.latitude, b.startLoc.longitude, sortLoc.latitude, sortLoc.longitude)\n            } else if (sortBy === 'end') {\n                return getDistance(a.endLoc.latitude, a.endLoc.longitude, sortLoc.latitude, sortLoc.longitude) - getDistance(b.endLoc.latitude, b.endLoc.longitude, sortLoc.latitude, sortLoc.longitude)\n            } else {\n                return 0;\n            }\n        })]\n    }\n\n    const addRoom = (room) => {\n        setRoomList((prev) => getSortedList([...prev, room]))\n    }\n\n    const deleteRoom = (id) => {\n        setRoomList((prev) => prev.filter((r) => r.id !== id))\n    }\n\n    const sortRoomClickHandler = (e) => {\n        e.preventDefault();\n        if (startLoc.latitude === 0 && startLoc.longitude === 0 && endLoc.latitude === 0 && endLoc.longitude === 0 && sortLoc.latitude === 0 && sortLoc.longitude === 0) {\n            navigator.geolocation.getCurrentPosition((pos) => {\n                setStartLoc({latitude: pos.coords.latitude, longitude: pos.coords.longitude});\n                setEndLoc({latitude: pos.coords.latitude, longitude: pos.coords.longitude});\n                setSortLoc({latitude: pos.coords.latitude, longitude: pos.coords.longitude});\n                setOpenCreateButton(false);\n                setOpenSortButton(false);\n                setOpenSort(true);\n            }, (e) => {\n                alert('위치 권한을 설정해주세요');\n            })\n        } else {\n            setOpenCreateButton(false);\n            setOpenSortButton(false);\n            setOpenSort(true);\n        }\n    }\n\n    const createRoomClickHandler = (e) => {\n        e.preventDefault();\n        if (startLoc.latitude === 0 && startLoc.longitude === 0 && endLoc.latitude === 0 && endLoc.longitude === 0 && sortLoc.latitude === 0 && sortLoc.longitude === 0) {\n            navigator.geolocation.getCurrentPosition((pos) => {\n                setStartLoc({latitude: pos.coords.latitude, longitude: pos.coords.longitude});\n                setEndLoc({latitude: pos.coords.latitude, longitude: pos.coords.longitude});\n                setSortLoc({latitude: pos.coords.latitude, longitude: pos.coords.longitude});\n                setOpenCreateButton(false);\n                setOpenSortButton(false);\n                setOpenCreateRoom(true);\n            }, (e) => {\n                alert('위치 권한을 설정해주세요');\n            })\n        } else {\n            setOpenCreateButton(false);\n            setOpenSortButton(false);\n            setOpenCreateRoom(true);\n        }\n    }\n\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((pos) => {\n                if (startLoc.latitude === 0 && startLoc.longitude === 0) {\n                    setStartLoc({ latitude: pos.coords.latitude, longitude: pos.coords.longitude })\n                }\n                if (endLoc.latitude === 0 && endLoc.longitude === 0) {\n                    setEndLoc({ latitude: pos.coords.latitude, longitude: pos.coords.longitude })\n                }\n                if (sortLoc.latitude === 0 && sortLoc.longitude === 0) {\n                    setSortLoc({ latitude: pos.coords.latitude, longitude: pos.coords.longitude })\n                }\n            }, (e) => { });\n        }\n    }, [])\n\n    useEffect(() => {\n        setRoomList(getSortedList(roomList))\n    }, [sortLoc, sortBy])// eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        getSocket().removeAllListeners('roomCreated');\n        getSocket().on('roomCreated', (room) => {\n            addRoom({\n                id: parseInt(room.id),\n                start: room.SrcText,\n                end: room.DestText,\n                startLoc: { latitude: parseFloat(room.SrcLatitude), longitude: parseFloat(room.SrcLongitude) },\n                endLoc: { latitude: parseFloat(room.DestLatitude), longitude: parseFloat(room.DestLongitude) },\n                date: dayjs(room.date),\n                time: dayjs('2020-01-01 ' + room.time)\n            })\n        });\n        setRoomList((prev) => getSortedList(prev))\n    }, [roomId])\n\n    useEffect(() => {\n        const soc = getSocket();\n\n        soc.on('roomListRes', (rooms) => {\n            setRoomList(getSortedList(rooms.map((room) => ({\n                id: parseInt(room.id),\n                start: room.SrcText,\n                end: room.DestText,\n                startLoc: { latitude: parseFloat(room.SrcLatitude), longitude: parseFloat(room.SrcLongitude) },\n                endLoc: { latitude: parseFloat(room.DestLatitude), longitude: parseFloat(room.DestLongitude) },\n                date: dayjs(room.date),\n                time: dayjs('2020-01-01 ' + room.time)\n            }))));\n        })\n        soc.emit('roomListReq');\n\n        soc.on('fullRoomRes', (ids) => {\n            setFullIds(new Set(ids.map(id => parseInt(id))));\n        })\n        soc.emit('fullRoomReq');\n\n        soc.on('roomFulled', (id) => {\n            setFullIds((prev) => new Set(prev.add(parseInt(id))));\n        })\n\n        soc.on('roomEmptied', (id) => {\n            setFullIds((prev) => {\n                prev.delete(id);\n                return new Set(prev);\n            });\n        })\n\n        getSocket().on('joinRoomRes', (res) => {\n            if (res.ok) {\n                clearMessage();\n                setRoomId(parseInt(res.id));\n                setIsInRoom(true);\n                setIsHost(false);\n                addMessage({ type: 'system', text: \"입장\" });\n            } else {\n                alert(res.reason);\n            }\n        })\n\n        getSocket().on('roomJoined', (res) => {\n            addMessage({ type: 'system', text: \"상대 입장\" })\n        })\n    }, [])\n\n    const isPC = useMediaQuery({ query: \"(min-width: 700px)\" });\n    const roomListStyle = css`\n        flex-grow: 1;\n\n        height: calc(var(--vh, 1vh) * 100 - 87px${isPC ? '' : ' - 12px'});\n        padding: 3px;\n\n        overflow: auto;\n        &::-webkit-scrollbar {\n            width: 10px;\n        }\n        &::-webkit-scrollbar-thumb {\n            background-color: #2BAE66;\n        }\n        &::-webkit-scrollbar-track {\n            background-color: #DCEDC8;\n        }\n    `;\n\n    const noRoomStyle = css`\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        flex-grow: 1;\n\n        height: calc(var(--vh, 1vh) * 100 - 90px${isPC ? '' : ' - 12px'});\n\n        font-size: 4em;\n    `;\n\n    return (\n        <>\n            {roomList.length === 0\n                ? <div css={noRoomStyle}><img src={birdImg} alt='noRoom' css={css`position:relative;bottom:30px;width:128px;height:auto`} /><pre> . . .</pre></div>\n                : <List\n                    css={roomListStyle}\n                >\n                    {roomList.filter((room) => room.id === roomId || !fullIds.has(room.id)).map((data) => {\n                        return (\n                            <ListItem key={data.id} css={listItemStyle} >\n                                {data.id === roomId\n                                    ? <MyRoom setRejoin={setRejoin} roomData={data} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} />\n                                    : <Room setRejoin={setRejoin} roomData={data} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} />\n                                }\n                            </ListItem>\n                        )\n                    })}\n                </List>\n            }\n            {openSortButton\n                ? <Fab style={openSortButtonStyle} onClick={sortRoomClickHandler}>\n                    <SearchIcon />\n                </Fab>\n                : <></>\n            }\n            <SortRoom setOpenCreateButton={setOpenCreateButton} setOpenSortButton={setOpenSortButton} open={openSort} setOpen={setOpenSort} sortBy={sortBy} setSortBy={setSortBy} sortLoc={sortLoc} setSortLoc={setSortLoc} />\n            {openCreateButton\n                ? <Fab style={createRoomButtonStyle} onClick={createRoomClickHandler}>\n                    <AddIcon />\n                </Fab>\n                : <></>\n            }\n            <CreateRoom start={start} setStart={setStart} end={end} setEnd={setEnd} startLoc={startLoc} setStartLoc={setStartLoc} endLoc={endLoc} setEndLoc={setEndLoc} setOpenCreateButton={setOpenCreateButton} setOpenSortButton={setOpenSortButton} clearMessage={clearMessage} rejoin={rejoin} setRejoin={setRejoin} setRoomList={setRoomList} remake={remake} setRemake={setRemake} open={openCreateRoom} setOpen={setOpenCreateRoom} addRoom={addRoom} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} deleteRoom={deleteRoom} addMessage={addMessage} />\n        </>\n    )\n}\n\nexport default RoomList","/var/www/front-end/src/main/room/createRoom/SelectLoc.js",["195"],[],"/*global kakao*/\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useRef, useState } from 'react'\nimport Modal from 'react-modal/lib/components/Modal'\nimport FmdGoodOutlinedIcon from '@mui/icons-material/FmdGoodOutlined';\nimport { IconButton } from '@mui/material';\n\nconst validColor = \"#2BAE66\";\n\nfunction SelectLoc({ loc, setLoc, text, activate, setActivate }) {\n    const [open, setOpen] = useState(false);\n    const mapRef = useRef(null);\n\n    const waitModalRender = (cb) => {\n        if (mapRef.current === null)\n            setTimeout(() => waitModalRender(cb), 0);\n        else\n            cb();\n    }\n\n    const iconClickHandler = (e) => {\n        e.preventDefault();\n        setOpen(true);\n\n        waitModalRender(() => {\n            const drawMap = (locc) => {\n                const options = { //지도를 생성할 때 필요한 기본 옵션\n                    center: new kakao.maps.LatLng(locc.latitude, locc.longitude), //지도의 중심좌표.\n                    level: 3 //지도의 레벨(확대, 축소 정도)\n                };\n                const map = new kakao.maps.Map(mapRef.current, options); //지도 생성 및 객체 리턴\n\n                if (activate) {\n                    const marker = new kakao.maps.Marker({\n                        // 지도 중심좌표에 마커를 생성합니다 \n                        position: new kakao.maps.LatLng(locc.latitude, locc.longitude),\n                    });\n                    marker.setMap(map);\n\n                    const customOverlay = new kakao.maps.CustomOverlay({\n                        map: map,\n                        position: new kakao.maps.LatLng(locc.latitude, locc.longitude),\n                        content: `<div style=\"padding:3px;position: relative;bottom:55px;color:black;background-color:white;border-radius:5px;border:1px solid black\">${text}</div>`,\n                    });\n                }\n\n                kakao.maps.event.addListener(map, 'click', (event) => {\n                    // 클릭한 위도, 경도 정보를 가져옵니다 \n                    const latlng = event.latLng;\n                    setLoc({ latitude: latlng.getLat(), longitude: latlng.getLng() })\n                    setOpen(false);\n                    setActivate(true);\n                });\n            }\n            drawMap(loc)\n        })\n    }\n    return (\n        <>\n            <IconButton sx={{ \"svg.MuiSvgIcon-root\": { color: activate ? validColor : 'none' } }} size=\"large\" onClick={iconClickHandler}>\n                <FmdGoodOutlinedIcon fontSize=\"inherit\" />\n            </IconButton>\n            <Modal\n                isOpen={open}\n                onRequestClose={() => setOpen(false)}\n                ariaHideApp={false}\n            >\n                <div ref={mapRef} css={css`height:100%`}>\n\n                </div>\n\n            </Modal>\n        </>\n    )\n}\n\nexport default SelectLoc",[],"/var/www/front-end/src/main/room/sort/SortRoom.js",[],[],"/var/www/front-end/src/main/room/sort/SelectLoc.js",["196"],[],"/*global kakao*/\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useRef, useState } from 'react'\nimport Modal from 'react-modal/lib/components/Modal'\nimport FmdGoodOutlinedIcon from '@mui/icons-material/FmdGoodOutlined';\nimport { IconButton } from '@mui/material';\n\nconst validColor = \"#2BAE66\";\n\nfunction SelectLoc({ loc, setLoc, sortBy }) {\n    const [open, setOpen] = useState(false);\n    const mapRef = useRef(null);\n\n    const waitModalRender = (cb) => {\n        if (mapRef.current === null)\n            setTimeout(() => waitModalRender(cb), 0);\n        else\n            cb();\n    }\n\n    const iconClickHandler = (e) => {\n        e.preventDefault();\n        setOpen(true);\n\n        waitModalRender(() => {\n            const options = { //지도를 생성할 때 필요한 기본 옵션\n                center: new kakao.maps.LatLng(loc.latitude, loc.longitude), //지도의 중심좌표.\n                level: 3 //지도의 레벨(확대, 축소 정도)\n            };\n            const map = new kakao.maps.Map(mapRef.current, options); //지도 생성 및 객체 리턴\n\n            const marker = new kakao.maps.Marker({\n                // 지도 중심좌표에 마커를 생성합니다 \n                position: new kakao.maps.LatLng(loc.latitude, loc.longitude),\n            });\n            marker.setMap(map);\n\n            const customOverlay = new kakao.maps.CustomOverlay({\n                map: map,\n                position: new kakao.maps.LatLng(loc.latitude, loc.longitude),\n                content: `<div style=\"padding:3px;position: relative;bottom:55px;color:black;background-color:white;border-radius:5px;border:1px solid black\">검색기준: ${sortBy === 'start' ? '출발지' : '도착지'}</div>`,\n            });\n\n            kakao.maps.event.addListener(map, 'click', (event) => {\n                // 클릭한 위도, 경도 정보를 가져옵니다 \n                const latlng = event.latLng;\n                setLoc({ latitude: latlng.getLat(), longitude: latlng.getLng() });\n                setOpen(false);\n            });\n        })\n    }\n\n    return (\n        <>\n            <IconButton sx={{ \"svg.MuiSvgIcon-root\": { color: loc === null ? 'none' : validColor } }} size=\"large\" onClick={iconClickHandler}>\n                <FmdGoodOutlinedIcon fontSize=\"inherit\" />\n            </IconButton>\n            <Modal\n                isOpen={open}\n                onRequestClose={() => setOpen(false)}\n                ariaHideApp={false}\n            >\n                <div ref={mapRef} css={css`height:100%`}>\n\n                </div>\n\n            </Modal>\n        </>\n    )\n}\n\nexport default SelectLoc","/var/www/front-end/src/main/room/createRoom/CreateLocInput.js",[],[],"/var/www/front-end/src/header/LogoComponent.js",[],[],"/var/www/front-end/src/main/room/ModalText.js",["197","198","199"],[],"/*global kakao*/\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useState, useRef } from \"react\";\nimport Modal from \"react-modal/lib/components/Modal\"\nimport { getDistance } from '../util/getDistance';\nimport { getLevelByDisance } from '../util/getLevelByDistance';\nimport { getMiddleLoc } from '../util/getMiddleLoc';\n\nconst modalStyle = {\n    overlay: {\n        zIndex: 2000\n    },\n    content: {\n        top: 'calc(var(--vh, 1vh) * 10)',\n        left: '10vw',\n        right: '10vw',\n        bottom: 'calc(var(--vh, 1vh) * 10)'\n      }\n};\n\nconst mapStyle = css`\n    height: 100%\n`;\n\nconst clickStyle = css`\n    color: #FCF6F5;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    text-decoration: none;\n    &:visited {\n        color: #FCF6F5;\n    }\n`;\n\nfunction ModalText({ closeMap, open, setOpen, start, startLoc, end, endLoc }) {\n    const mapRef = useRef(null);\n\n    const waitModalRender = (cb) => {\n        if (mapRef.current === null)\n            setTimeout(() => waitModalRender(cb), 0);\n        else\n            cb();\n    }\n\n    if (open) {\n        waitModalRender(() => {\n            const middleLoc = getMiddleLoc(startLoc, endLoc);\n            const options = { //지도를 생성할 때 필요한 기본 옵션\n                center: new kakao.maps.LatLng(middleLoc.latitude, middleLoc.longitude), //지도의 중심좌표.\n                level: getLevelByDisance(getDistance(startLoc.latitude, startLoc.longitude, endLoc.latitude, endLoc.longitude)*1000) //지도의 레벨(확대, 축소 정도)\n            };\n\n            const map = new kakao.maps.Map(mapRef.current, options); //지도 생성 및 객체 리턴\n\n            //마커 생성\n            const startMarker = new kakao.maps.Marker({\n                position: new kakao.maps.LatLng(startLoc.latitude, startLoc.longitude)\n            });\n            startMarker.setMap(map);\n\n            const startCustomOverlay = new kakao.maps.CustomOverlay({\n                map: map,\n                position: new kakao.maps.LatLng(startLoc.latitude, startLoc.longitude),\n                content: `<div style=\"padding:3px;position: relative;bottom:55px;color:black;background-color:white;border-radius:5px;border:1px solid black\">출발: ${start}</div>`,\n            });\n\n            //마커 생성\n            const endMarker = new kakao.maps.Marker({\n                position: new kakao.maps.LatLng(endLoc.latitude, endLoc.longitude)\n            });\n            endMarker.setMap(map);\n\n            const customOverlay = new kakao.maps.CustomOverlay({\n                map: map,\n                position: new kakao.maps.LatLng(endLoc.latitude, endLoc.longitude),\n                content: `<div style=\"padding:3px;position: relative;bottom:55px;color:black;background-color:white;border-radius:5px;border:1px solid black\">도착: ${end}</div>`,\n            });\n        })\n    }\n\n    return (\n        <>\n            <div css={clickStyle}>\n                <div css={css`display: inline-block; display:flex; align-items: center`}>\n                    {start}\n                </div>\n                <div css={css`display: inline-block; display:flex; align-items: center`}>\n                    {`\\u00A0→\\u00A0${end}`}\n                </div>\n            </div>\n            <Modal\n                style={modalStyle}\n                isOpen={open}\n                onRequestClose={closeMap}\n                ariaHideApp={false}\n            >\n                <div ref={mapRef} css={mapStyle}>\n                    \n                </div>\n            </Modal>\n        </>\n    )\n\n}\n\nexport default ModalText","/var/www/front-end/src/main/room/createRoom/ValidCheck.js",[],[],"/var/www/front-end/src/main/room/createRoom/CreateTime.js",[],[],[],"/var/www/front-end/src/App.js",[],[],"/var/www/front-end/src/index.js",[],[],"/var/www/front-end/src/reportWebVitals.js",[],[],"/var/www/front-end/src/main/Main.js",["200"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport ComputerChat from './chat/ComputerChat';\nimport MobileChat from './chat/MobileChat';\nimport RoomList from './room/RoomList';\nimport { getSocket } from '../socket/socket';\nimport { useMediaQuery } from 'react-responsive';\n\nfunction Main() {\n    const [roomList, setRoomList] = useState([]);\n    const [isInRoom, setIsInRoom] = useState(false);\n    const [isHost, setIsHost] = useState(false);\n    const [roomId, setRoomId] = useState(null);\n    const [chatList, setChatList] = useState([]);\n    const chatStyleRef = useRef();\n    const [remake, setRemake] = useState(false);\n    const [rejoin, setRejoin] = useState(null);\n    const [fullIds, setFullIds] = useState(new Set()); \n\n    const addMessage = (m) => {\n        setChatList((prev) => [...prev, m]);\n    }\n\n    const clearMessage = () => {\n        setChatList([]);\n    }\n\n    useEffect(() => {\n        if (chatStyleRef.current)\n            chatStyleRef.current.scrollTop = chatStyleRef.current.scrollHeight;\n    }, [chatList])\n\n    useEffect(() => {\n        getSocket().on('roomDeleted', (id) => {\n            setRoomList((prev) => (prev.filter((room) => room.id !== id)));\n        })\n    }, [])\n\n    useEffect(() => {\n        getSocket().removeAllListeners(\"roomDeletedC\");\n        getSocket().on('roomDeletedC', () => {\n            if (isInRoom && !isHost) {\n                addMessage({ type: 'system', text: '방 삭제됨' });\n                setIsInRoom(false);\n                setIsHost(false);\n                setRoomId(null);\n            }\n        })\n\n        getSocket().removeAllListeners(\"roomQuited\");\n        getSocket().on('roomQuited', () => {\n            if (isInRoom && isHost) {\n                addMessage({ type: 'system', text: '상대 퇴장' });\n                setIsInRoom(true);\n                setIsHost(true);\n                setRoomId(roomId);\n            }\n        })\n\n    }, [isInRoom])\n\n    const isPC = useMediaQuery({query : \"(min-width: 700px)\"});\n\n    const mainStyle = css`\n        display: flex;\n        flex-direction: ${isPC ? 'row' : 'column'};\n        align-items: stretch;\n    `;\n\n    return (\n        <div className=\"main\" css={mainStyle}>\n            {isPC\n                ? <ComputerChat roomList={roomList} rejoin={rejoin} setRejoin={setRejoin} remake={remake} setRemake={setRemake} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} chatList={chatList} setChatList={setChatList} addMessage={addMessage} setRoomList={setRoomList} chatStyleRef={chatStyleRef} />\n                : <></>\n            }\n            <RoomList clearMessage={clearMessage} fullIds={fullIds} setFullIds={setFullIds} rejoin={rejoin} setRejoin={setRejoin} remake={remake} setRemake={setRemake} roomList={roomList} setRoomList={setRoomList} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} addMessage={addMessage} />\n            {isPC\n                ? <></>\n                : <MobileChat roomList={roomList} rejoin={rejoin} setRejoin={setRejoin} remake={remake} setRemake={setRemake} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} chatList={chatList} setChatList={setChatList} addMessage={addMessage} setRoomList={setRoomList} chatStyleRef={chatStyleRef} />\n            }\n        </div>\n    )\n}\n\nexport default Main","/var/www/front-end/src/header/Header.js",[],[],"/var/www/front-end/src/header/AdComponent.js",[],[],"/var/www/front-end/src/main/chat/ComputerChat.js",[],[],"/var/www/front-end/src/main/chat/MobileChat.js",["201"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useState } from 'react';\nimport { Box, Drawer } from '@mui/material';\nimport Chat from './Chat';\n\nconst buttonStyle = css`\n    border-color: #2BAE66;\n`;\n\nconst chatStyle = css`\n      width: 100%;\n      height: 100%;\n      border-radius: 3px;\n      padding-bottom: 3px;\n`;\n\nconst pullerSytle = {\n    width: 30,\n    height: 6,\n    backgroundColor: '#E0E0E0',\n    borderRadius: 3,\n    position: 'absolute',\n    top: 8,\n    left: 'calc(50% - 15px)',\n};\n\nfunction MobileChat({ roomList, remake, setRemake, isInRoom, setIsInRoom, isHost, setIsHost, roomId, setRoomId, chatList, setChatList, addMessage, setRoomList, chatStyleRef }) {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <>\n            <Drawer\n                anchor=\"bottom\"\n                open={open}\n                PaperProps={{ style: { height: \"90%\", width: \"100%\", overflow: 'visible', borderRadius: '5px', backgroundColor: '#fcf6f5', fontSize: '1.3em' } }}\n                onClose={() => open ? setOpen(false) : setOpen(true)}\n                ModalProps={{\n                    keepMounted: true\n                }}\n            >\n                <Box\n                    onClick={() => setOpen(!open)}\n                    sx={{\n                        position: 'absolute',\n                        top: -30,\n                        backgroundColor: 'white',\n                        border: '1px solid #2BAE66',\n                        borderBottom: '0px',\n                        borderTopLeftRadius: 8,\n                        borderTopRightRadius: 8,\n                        visibility: 'visible',\n                        right: '30%',\n                        left: '30%',\n                        height: '30px',\n                    }}\n                >\n                    <Box sx={pullerSytle} />\n                </Box>\n                <div css={chatStyle} onClick={()=>setOpen(true)}>\n                    <Chat roomList={roomList} remake={remake} setRemake={setRemake} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} chatList={chatList} setChatList={setChatList} addMessage={addMessage} setRoomList={setRoomList} chatStyleRef={chatStyleRef} />\n                </div>\n            </Drawer>\n        </>\n    )\n}\n\nexport default MobileChat","/var/www/front-end/src/main/chat/Chat.js",["202","203"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, TextField } from '@mui/material';\nimport ChatView from './ChatView';\nimport { getSocket } from '../../socket/socket'\nimport { useEffect, useRef, useState } from 'react';\nimport dayjs from 'dayjs';\nimport ChatRoomInfo from './ChatRoomInfo';\nimport { useMediaQuery } from 'react-responsive';\n\nconst chatStyle = css`\n  height: 100%;\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst checkMessage = (m) => {\n  if (m === '')\n    return false;\n  return true;\n}\n\nfunction Chat({ roomList, remake, setRemake, isInRoom, setIsInRoom, isHost, setIsHost, roomId, setRoomId, chatList, setChatList, addMessage, setRoomList, chatStyleRef }) {\n  const [message, setMessage] = useState('');\n\n  const chatHandler = (e) => {\n    e.preventDefault();\n    if (!isInRoom)\n      return;\n\n    if (checkMessage(message))\n      getSocket().emit('sendMessageReq', { message: message.trim(), time: dayjs().format('HH:mm:ss') });\n  }\n\n  useEffect(() => {\n    getSocket().removeAllListeners(\"sendMessageRes\");\n    getSocket().on('sendMessageRes', (res) => {\n      if (res.ok) {\n        addMessage({ type: 'me', text: res.message, time: dayjs('2020-01-01 ' + res.time) });\n        setMessage('');\n      } else {\n        alert(res.reason)\n      }\n    })\n    getSocket().removeAllListeners(\"messageReceived\");\n    getSocket().on('messageReceived', (res) => {\n      addMessage({ type: 'other', text: res.message, time: dayjs('2020-01-01 ' + res.time) });\n    })\n  }, [])\n\n  const isPC = useMediaQuery({query : \"(min-width: 700px)\"});\n\n  const textFieldStyle = {\n    flexGrow: '1',\n    '.MuiOutlinedInput-root': {\n      height: '100%'\n    },\n    '.MuiOutlinedInput-root input': {\n      padding: \"5px;\",\n      fontSize: isPC ? '1em' : '1.3em',\n      height: '100%',\n    },\n    '.MuiOutlinedInput-root fieldset': {\n      borderColor: 'green',\n    },\n    '.MuiOutlinedInput-root.Mui-focused fieldset': {\n      borderColor: 'green',\n    }\n  };\n  \n  const sendButtonStyle = {\n    boxShadow: \"0 0 0\",\n    backgroundColor: \"#2BAE66\",\n    padding: \"0px\",\n    fontSize: '0.8em',\n    width: isPC ? '45px' : '80px',\n    \n    minWidth: 'none',\n  \n    \"&:hover\": {\n      boxShadow: \"0 0 0\",\n      backgroundColor: \"#2BAE66\"\n    }\n  };\n\n  return (\n    <div css={chatStyle}>\n      { isInRoom ? <ChatRoomInfo room={roomList.find(room => room.id === roomId)} isInRoom={isInRoom} isHost={isHost}/> : <></>}\n      <ChatView chatList={chatList} setChatList={setChatList} chatStyleRef={chatStyleRef} />\n      <form css={css`display: flex; height: ${isPC ? '30px' : '40px'};`} onSubmit={chatHandler}>\n        <TextField autoComplete='off' sx={textFieldStyle} value={message} onChange={(e) => setMessage(e.target.value)} />\n        <Button variant=\"contained\" sx={sendButtonStyle} onClick={chatHandler}>보내기</Button>\n      </form>\n    </div>\n  )\n}\n\nexport default Chat;","/var/www/front-end/src/main/room/Room.js",[],[],"/var/www/front-end/src/main/util/getDistance.js",[],[],"/var/www/front-end/src/main/chat/ChatView.js",[],[],"/var/www/front-end/src/main/room/EnterButton.js",[],[],"/var/www/front-end/src/main/room/StartTime.js",[],[],"/var/www/front-end/src/main/room/Start2End.js",[],[],"/var/www/front-end/src/main/room/createRoom/CreateDate.js",[],[],"/var/www/front-end/src/main/chat/type/MyChat.js",[],[],"/var/www/front-end/src/main/chat/type/OtherChat.js",[],[],"/var/www/front-end/src/main/chat/type/SystemChat.js",[],[],"/var/www/front-end/src/socket/socket.js",[],[],"/var/www/front-end/src/main/room/MyRoom.js",["204","205"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport EnterButton from './EnterButton';\nimport StartTime from './StartTime';\nimport Start2End from './Start2End';\nimport HouseIcon from '@mui/icons-material/House';\nimport { IconButton } from '@mui/material';\nimport { useState } from 'react';\n\nconst roomStyle = css`\n    display: flex;\n    \n    justify-content: space-between;\n    align-items: stretch;\n\n    margin: 2px;\n    padding: 6px;\n    width: 99%;\n\n    border-radius: 5px;\n\n    background-color: #5CA00C;\n    color: #FCF6F5;\n\n    box-shadow: 3px 3px 3px gray;\n    \n`;\n\nfunction MyRoom({ setRejoin, roomData, isInRoom, setIsInRoom, isHost, setIsHost, roomId, setRoomId }) {\n    const [openMap, setOpenMap] = useState(false);\n\n    const closeMap = () => {\n        setOpenMap(false);\n    }\n\n    const clickHandler = () => {\n        if (!openMap){\n            setOpenMap(true)\n        }\n    }\n\n    return (\n        <div css={roomStyle} onClick={clickHandler}>\n            <StartTime time={roomData.time} />\n            <Start2End closeMap={closeMap} openMap={openMap} setOpenMap={setOpenMap} start={roomData.start} startLoc={roomData.startLoc} end={roomData.end} endLoc={roomData.endLoc} />\n            <div css={css`display:flex; justify-content: center; border-radius: 4px; border: 1px white solid; padding: 6px 8px; width: 46px; height: 26.25px;`}>\n                <HouseIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default MyRoom","/var/www/front-end/src/main/chat/ChatRoomInfo.js",[],[],"/var/www/front-end/src/main/chat/ChatMapInfo.js",["206","207","208"],[],"/*global kakao*/\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\nimport Modal from 'react-modal/lib/components/Modal';\nimport { getDistance } from '../util/getDistance';\nimport { getLevelByDisance } from '../util/getLevelByDistance';\nimport { getMiddleLoc } from '../util/getMiddleLoc';\nimport { useMediaQuery } from 'react-responsive';\n\nfunction ChatMapInfo({ room }) {\n    const [open, setOpen] = useState(false);\n    const mapRef = useRef(null);\n\n    const waitModalRender = (cb) => {\n        if (mapRef.current === null)\n            setTimeout(() => waitModalRender(cb), 0);\n        else\n            cb();\n    }\n\n    const clickHandler = (e) => {\n        setOpen(true);\n\n        waitModalRender(() => {\n            const startLoc = room.startLoc;\n            const endLoc = room.endLoc;\n            const middleLoc = getMiddleLoc(startLoc, endLoc);\n            const options = { //지도를 생성할 때 필요한 기본 옵션\n                center: new kakao.maps.LatLng(middleLoc.latitude, middleLoc.longitude), //지도의 중심좌표.\n                level: getLevelByDisance(getDistance(startLoc.latitude, startLoc.longitude, endLoc.latitude, endLoc.longitude) * 1000) //지도의 레벨(확대, 축소 정도)\n            };\n\n            const map = new kakao.maps.Map(mapRef.current, options); //지도 생성 및 객체 리턴\n\n            //마커 생성\n            const startMarker = new kakao.maps.Marker({\n                position: new kakao.maps.LatLng(startLoc.latitude, startLoc.longitude)\n            });\n            startMarker.setMap(map);\n\n            const startCustomOverlay = new kakao.maps.CustomOverlay({\n                map: map,\n                position: new kakao.maps.LatLng(startLoc.latitude, startLoc.longitude),\n                content: `<div style=\"padding:3px;position: relative;bottom:55px;color:black;background-color:white;border-radius:5px;border:1px solid black\">출발: ${room.start}</div>`,\n            });\n\n            //마커 생성\n            const endMarker = new kakao.maps.Marker({\n                position: new kakao.maps.LatLng(endLoc.latitude, endLoc.longitude)\n            });\n            endMarker.setMap(map);\n\n            const endCustomOverlay = new kakao.maps.CustomOverlay({\n                map: map,\n                position: new kakao.maps.LatLng(endLoc.latitude, endLoc.longitude),\n                content: `<div style=\"padding:3px;position: relative;bottom:55px;color:black;background-color:white;border-radius:5px;border:1px solid black\">도착: ${room.end}</div>`,\n            });\n        })\n    }\n\n    const isPC = useMediaQuery({ query: \"(min-width: 700px)\" });\n\n    const mapButtonSytle = {\n        color: 'white',\n        boxShadow: \"0 0 0\",\n        backgroundColor: \"#2BAE66\",\n        padding: \"0px\",\n        fontSize: '0.8em',\n        width: isPC ? '55px' : '80px',\n        minWidth: '55px',\n\n        \"&:hover\": {\n            boxShadow: \"0 0 0\",\n            backgroundColor: \"#2BAE66\"\n        }\n    };\n\n    return (\n        <>\n            <Button sx={mapButtonSytle} onClick={clickHandler}>위치</Button>\n            <Modal\n                style={{ overlay: { zIndex: 2000 } }}\n                isOpen={open}\n                onRequestClose={() => setOpen(false)}\n                ariaHideApp={false}\n            >\n                <div ref={mapRef} css={css`height: 100%`}></div>\n            </Modal>\n        </>\n    )\n}\n\nexport default ChatMapInfo","/var/www/front-end/src/main/util/getMiddleLoc.js",[],[],"/var/www/front-end/src/main/util/getLevelByDistance.js",[],[],{"ruleId":"209","severity":1,"message":"210","line":118,"column":8,"nodeType":"211","endLine":118,"endColumn":16,"suggestions":"212"},{"ruleId":"209","severity":1,"message":"213","line":173,"column":8,"nodeType":"211","endLine":173,"endColumn":75,"suggestions":"214"},{"ruleId":"209","severity":1,"message":"215","line":130,"column":8,"nodeType":"211","endLine":130,"endColumn":10,"suggestions":"216"},{"ruleId":"209","severity":1,"message":"217","line":150,"column":8,"nodeType":"211","endLine":150,"endColumn":16,"suggestions":"218"},{"ruleId":"209","severity":1,"message":"219","line":199,"column":8,"nodeType":"211","endLine":199,"endColumn":10,"suggestions":"220"},{"ruleId":"209","severity":1,"message":"221","line":134,"column":8,"nodeType":"211","endLine":134,"endColumn":25,"suggestions":"222","suppressions":"223"},{"ruleId":"224","severity":1,"message":"225","line":41,"column":27,"nodeType":"226","messageId":"227","endLine":41,"endColumn":40},{"ruleId":"224","severity":1,"message":"225","line":39,"column":19,"nodeType":"226","messageId":"227","endLine":39,"endColumn":32},{"ruleId":"224","severity":1,"message":"228","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":18},{"ruleId":"224","severity":1,"message":"229","line":63,"column":19,"nodeType":"226","messageId":"227","endLine":63,"endColumn":37},{"ruleId":"224","severity":1,"message":"225","line":75,"column":19,"nodeType":"226","messageId":"227","endLine":75,"endColumn":32},{"ruleId":"209","severity":1,"message":"230","line":61,"column":8,"nodeType":"211","endLine":61,"endColumn":18,"suggestions":"231"},{"ruleId":"224","severity":1,"message":"232","line":7,"column":7,"nodeType":"226","messageId":"227","endLine":7,"endColumn":18},{"ruleId":"224","severity":1,"message":"233","line":6,"column":21,"nodeType":"226","messageId":"227","endLine":6,"endColumn":27},{"ruleId":"209","severity":1,"message":"234","line":51,"column":6,"nodeType":"211","endLine":51,"endColumn":8,"suggestions":"235"},{"ruleId":"224","severity":1,"message":"236","line":3,"column":8,"nodeType":"226","messageId":"227","endLine":3,"endColumn":19},{"ruleId":"224","severity":1,"message":"237","line":7,"column":10,"nodeType":"226","messageId":"227","endLine":7,"endColumn":20},{"ruleId":"224","severity":1,"message":"238","line":5,"column":10,"nodeType":"226","messageId":"227","endLine":5,"endColumn":19},{"ruleId":"224","severity":1,"message":"229","line":43,"column":19,"nodeType":"226","messageId":"227","endLine":43,"endColumn":37},{"ruleId":"224","severity":1,"message":"239","line":55,"column":19,"nodeType":"226","messageId":"227","endLine":55,"endColumn":35},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addMessage', 'addRoom', 'clearMessage', 'setIsHost', 'setIsInRoom', and 'setRoomId'. Either include them or remove the dependency array. If 'clearMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["240"],"React Hook useEffect has missing dependencies: 'addMessage', 'setIsHost', 'setIsInRoom', 'setRejoin', 'setRemake', 'setRoomId', and 'setRoomList'. Either include them or remove the dependency array. If 'setRoomList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["241"],"React Hook useEffect has missing dependencies: 'endLoc.latitude', 'endLoc.longitude', 'sortLoc.latitude', 'sortLoc.longitude', 'startLoc.latitude', and 'startLoc.longitude'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has missing dependencies: 'addRoom', 'getSortedList', and 'setRoomList'. Either include them or remove the dependency array. If 'setRoomList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],"React Hook useEffect has missing dependencies: 'addMessage', 'clearMessage', 'getSortedList', 'setFullIds', 'setIsHost', 'setIsInRoom', 'setRoomId', and 'setRoomList'. Either include them or remove the dependency array. If 'setRoomList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["244"],"React Hook useEffect has missing dependencies: 'getSortedList', 'roomList', and 'setRoomList'. Either include them or remove the dependency array. If 'setRoomList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["245"],["246"],"no-unused-vars","'customOverlay' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'startCustomOverlay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isHost' and 'roomId'. Either include them or remove the dependency array. You can also do a functional update 'setRoomId(r => ...)' if you only need 'roomId' in the 'setRoomId' call.",["247"],"'buttonStyle' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'addMessage'. Either include it or remove the dependency array. If 'addMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["248"],"'EnterButton' is defined but never used.","'IconButton' is defined but never used.","'useEffect' is defined but never used.","'endCustomOverlay' is assigned a value but never used.",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"kind":"261","justification":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [addMessage, addRoom, clearMessage, roomId, setIsHost, setIsInRoom, setRoomId]",{"range":"267","text":"268"},"Update the dependencies array to be: [rejoin, remake, start, end, startLoc, endLoc, startDay, startTime, setRoomList, addMessage, setIsInRoom, setIsHost, setRoomId, setRemake, setRejoin]",{"range":"269","text":"270"},"Update the dependencies array to be: [endLoc.latitude, endLoc.longitude, sortLoc.latitude, sortLoc.longitude, startLoc.latitude, startLoc.longitude]",{"range":"271","text":"272"},"Update the dependencies array to be: [addRoom, getSortedList, roomId, setRoomList]",{"range":"273","text":"274"},"Update the dependencies array to be: [addMessage, clearMessage, getSortedList, setFullIds, setIsHost, setIsInRoom, setRoomId, setRoomList]",{"range":"275","text":"276"},"Update the dependencies array to be: [sortLoc, sortBy, setRoomList, getSortedList, roomList]",{"range":"277","text":"278"},"directive","","Update the dependencies array to be: [isHost, isInRoom, roomId]",{"range":"279","text":"280"},"Update the dependencies array to be: [addMessage]",{"range":"281","text":"282"},[3827,3835],"[addMessage, addRoom, clearMessage, roomId, setIsHost, setIsInRoom, setRoomId]",[5997,6064],"[rejoin, remake, start, end, startLoc, endLoc, startDay, startTime, setRoomList, addMessage, setIsInRoom, setIsHost, setRoomId, setRemake, setRejoin]",[5450,5452],"[endLoc.latitude, endLoc.longitude, sortLoc.latitude, sortLoc.longitude, startLoc.latitude, startLoc.longitude]",[6264,6272],"[addRoom, getSortedList, roomId, setRoomList]",[7857,7859],"[addMessage, clearMessage, getSortedList, setFullIds, setIsHost, setIsInRoom, setRoomId, setRoomList]",[5529,5546],"[sortLoc, sortBy, setRoomList, getSortedList, roomList]",[1982,1992],"[isHost, isInRoom, roomId]",[1545,1547],"[addMessage]"]