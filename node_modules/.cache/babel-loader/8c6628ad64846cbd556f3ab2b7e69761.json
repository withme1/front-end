{"ast":null,"code":"export function getTextFieldAriaText(rawValue, utils) {\n  // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  return rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choose date';\n}\nexport const getDisplayDate = (utils, value, inputFormat) => {\n  const date = utils.date(value);\n  const isEmpty = value === null;\n\n  if (isEmpty) {\n    return '';\n  }\n\n  return utils.isValid(date) ? utils.formatByString( // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  date, inputFormat) : '';\n};\nconst MASK_USER_INPUT_SYMBOL = '_';\nconst staticDateWith2DigitTokens = '2019-11-21T22:30:00.000';\nconst staticDateWith1DigitTokens = '2019-01-01T09:00:00.000';\nexport function checkMaskIsValidForCurrentFormat(mask, format, acceptRegex, utils) {\n  const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);\n  const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);\n  const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, '_');\n  const isMaskValid = inferredFormatPatternWith2Digits === mask && inferredFormatPatternWith1Digits === mask;\n\n  if (!isMaskValid && utils.lib !== 'luxon' && process.env.NODE_ENV !== 'production') {\n    console.warn(`The mask \"${mask}\" you passed is not valid for the format used ${format}. Falling down to uncontrolled not-masked input.`);\n  }\n\n  return isMaskValid;\n}\nexport const maskedDateFormatter = (mask, acceptRegexp) => value => {\n  return value.split('').map((char, i) => {\n    acceptRegexp.lastIndex = 0;\n\n    if (i > mask.length - 1) {\n      return '';\n    }\n\n    const maskChar = mask[i];\n    const nextMaskChar = mask[i + 1];\n    const acceptedChar = acceptRegexp.test(char) ? char : '';\n    const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;\n\n    if (i === value.length - 1 && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {\n      // when cursor at the end of mask part (e.g. month) prerender next symbol \"21\" -> \"21/\"\n      return formattedChar ? formattedChar + nextMaskChar : '';\n    }\n\n    return formattedChar;\n  }).join('');\n};","map":{"version":3,"names":["getTextFieldAriaText","rawValue","utils","isValid","date","format","getDisplayDate","value","inputFormat","isEmpty","formatByString","MASK_USER_INPUT_SYMBOL","staticDateWith2DigitTokens","staticDateWith1DigitTokens","checkMaskIsValidForCurrentFormat","mask","acceptRegex","formattedDateWith1Digit","inferredFormatPatternWith1Digits","replace","inferredFormatPatternWith2Digits","isMaskValid","lib","process","env","NODE_ENV","console","warn","maskedDateFormatter","acceptRegexp","split","map","char","i","lastIndex","length","maskChar","nextMaskChar","acceptedChar","test","formattedChar","join"],"sources":["/var/www/front-end/node_modules/@mui/x-date-pickers/internals/utils/text-field-helper.js"],"sourcesContent":["export function getTextFieldAriaText(rawValue, utils) {\n  // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  return rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choose date';\n}\nexport const getDisplayDate = (utils, value, inputFormat) => {\n  const date = utils.date(value);\n  const isEmpty = value === null;\n\n  if (isEmpty) {\n    return '';\n  }\n\n  return utils.isValid(date) ? utils.formatByString( // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  date, inputFormat) : '';\n};\nconst MASK_USER_INPUT_SYMBOL = '_';\nconst staticDateWith2DigitTokens = '2019-11-21T22:30:00.000';\nconst staticDateWith1DigitTokens = '2019-01-01T09:00:00.000';\nexport function checkMaskIsValidForCurrentFormat(mask, format, acceptRegex, utils) {\n  const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);\n  const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);\n  const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, '_');\n  const isMaskValid = inferredFormatPatternWith2Digits === mask && inferredFormatPatternWith1Digits === mask;\n\n  if (!isMaskValid && utils.lib !== 'luxon' && process.env.NODE_ENV !== 'production') {\n    console.warn(`The mask \"${mask}\" you passed is not valid for the format used ${format}. Falling down to uncontrolled not-masked input.`);\n  }\n\n  return isMaskValid;\n}\nexport const maskedDateFormatter = (mask, acceptRegexp) => value => {\n  return value.split('').map((char, i) => {\n    acceptRegexp.lastIndex = 0;\n\n    if (i > mask.length - 1) {\n      return '';\n    }\n\n    const maskChar = mask[i];\n    const nextMaskChar = mask[i + 1];\n    const acceptedChar = acceptRegexp.test(char) ? char : '';\n    const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;\n\n    if (i === value.length - 1 && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {\n      // when cursor at the end of mask part (e.g. month) prerender next symbol \"21\" -> \"21/\"\n      return formattedChar ? formattedChar + nextMaskChar : '';\n    }\n\n    return formattedChar;\n  }).join('');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}