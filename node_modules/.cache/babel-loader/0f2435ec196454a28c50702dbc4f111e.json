{"ast":null,"code":"var _jsxFileName = \"/var/www/front-end/src/main/Main.js\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport dayjs from 'dayjs';\nimport { useState } from 'react';\nimport ComputerChat from './chat/ComputerChat';\nimport MobileChat from './chat/MobileChat';\nimport RoomList from './room/RoomList';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst mainStyle = css`\n    display: flex;\n    align-items: stretch;\n`;\n\nfunction Main() {\n  _s();\n\n  const [roomList, setRoomList] = useState([]);\n  const [isInRoom, setIsInRoom] = useState(false);\n  const [isHost, setIsHost] = useState(false);\n  const [roomId, setRoomId] = useState(null);\n  const [chatList, setChatList] = useState([{\n    type: 'system',\n    text: '상대 입장',\n    time: dayjs()\n  }, {\n    type: 'other',\n    text: 'hihi',\n    time: dayjs()\n  }, {\n    type: 'me',\n    text: 'hihdddddddddddddddddddddddddddddddddddddddddi',\n    time: dayjs()\n  }, {\n    type: 'me',\n    text: 'hhiihi',\n    time: dayjs()\n  }]);\n\n  const addMessage = m => {\n    setChatList(prev => [...prev, m]);\n  };\n\n  useEffect(() => {\n    getSocket().on('roomDeleted', id => {\n      setRoomList(prev => prev.filter(room => room.id !== id));\n\n      if (isInRoom) {\n        addMessage({\n          type: 'system',\n          text: '방 삭제됨'\n        });\n        setIsInRoom(false);\n        setIsHost(false);\n        setRoomId(null);\n      }\n    });\n  });\n  return _jsxDEV(\"div\", {\n    className: \"main\",\n    css: mainStyle,\n    children: [_jsxDEV(MobileChat, {\n      isInRoom: isInRoom,\n      setIsInRoom: setIsInRoom,\n      isHost: isHost,\n      setIsHost: setIsHost,\n      roomId: roomId,\n      setRoomId: setRoomId,\n      chatList: chatList,\n      setChatList: setChatList,\n      addMessage: addMessage,\n      setRoomList: setRoomList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), _jsxDEV(ComputerChat, {\n      isInRoom: isInRoom,\n      setIsInRoom: setIsInRoom,\n      isHost: isHost,\n      setIsHost: setIsHost,\n      roomId: roomId,\n      setRoomId: setRoomId,\n      chatList: chatList,\n      setChatList: setChatList,\n      addMessage: addMessage,\n      setRoomList: setRoomList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), _jsxDEV(RoomList, {\n      roomList: roomList,\n      setRoomList: setRoomList,\n      isInRoom: isInRoom,\n      setIsInRoom: setIsInRoom,\n      isHost: isHost,\n      setIsHost: setIsHost,\n      roomId: roomId,\n      setRoomId: setRoomId,\n      addMessage: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"5i6z5y6m4WjRQmjHWQDKx1fIoaQ=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["css","dayjs","useState","ComputerChat","MobileChat","RoomList","mainStyle","Main","roomList","setRoomList","isInRoom","setIsInRoom","isHost","setIsHost","roomId","setRoomId","chatList","setChatList","type","text","time","addMessage","m","prev","useEffect","getSocket","on","id","filter","room"],"sources":["/var/www/front-end/src/main/Main.js"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport dayjs from 'dayjs';\nimport { useState } from 'react';\nimport ComputerChat from './chat/ComputerChat';\nimport MobileChat from './chat/MobileChat';\nimport RoomList from './room/RoomList';\n\nconst mainStyle = css`\n    display: flex;\n    align-items: stretch;\n`;\n\nfunction Main() {\n    const [roomList, setRoomList] = useState([]);\n    const [isInRoom, setIsInRoom] = useState(false);\n    const [isHost, setIsHost] = useState(false);\n    const [roomId, setRoomId] = useState(null);\n    const [chatList, setChatList] = useState([\n        { type: 'system', text: '상대 입장', time: dayjs() },\n        { type: 'other', text: 'hihi', time: dayjs() },\n        { type: 'me', text: 'hihdddddddddddddddddddddddddddddddddddddddddi', time: dayjs() },\n        { type: 'me', text: 'hhiihi', time: dayjs() }]);\n\n    const addMessage = (m) => {\n        setChatList((prev) => [...prev, m]);\n    }\n\n    useEffect(() => {\n        getSocket().on('roomDeleted', (id) => {\n            setRoomList((prev) => (prev.filter((room) => room.id !== id)));\n            if (isInRoom) {\n                addMessage({ type: 'system', text: '방 삭제됨' });\n                setIsInRoom(false);\n                setIsHost(false);\n                setRoomId(null);\n            }\n        })\n    })\n\n    return (\n        <div className=\"main\" css={mainStyle}>\n            <MobileChat isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} chatList={chatList} setChatList={setChatList} addMessage={addMessage} setRoomList={setRoomList} />\n            <ComputerChat isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} chatList={chatList} setChatList={setChatList} addMessage={addMessage} setRoomList={setRoomList} />\n            <RoomList roomList={roomList} setRoomList={setRoomList} isInRoom={isInRoom} setIsInRoom={setIsInRoom} isHost={isHost} setIsHost={setIsHost} roomId={roomId} setRoomId={setRoomId} addMessage={addMessage} />\n        </div>\n    )\n}\n\nexport default Main"],"mappings":"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"},"metadata":{},"sourceType":"module"}